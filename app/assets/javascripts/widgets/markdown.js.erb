<%

def render_html (tpl)
  dir = Rails.root.join("app", "views")
  view = ActionView::Base.new(dir, :user => @user)
  view.extend(ApplicationHelper)
  view.extend(IconHelper)
  view.extend(MarkdownHelper)
  view.render(partial: tpl, layout: nil)
end

font_awesome_selector = render_html('admin/shared/fontawesome').gsub('"', '\"').gsub("\n", '')
help_selector = render_html('shared/markdown_help').gsub('"', '\"').gsub("\n", '')

use_aws = Rails.env.production? || Rails.env.staging? || ENV['FORCE_AWS']

ignored = ["'cmdCode'"]
ignored << "'cmdImage'" if use_aws
%>

import widgets from 'widjet';

let id = 0;

let wrap = wrapper => function(e) {
  // Give ![] surround the selection and prepend the image link
  let chunk = undefined;
  let cursor = undefined;
  let selected = e.getSelection();
  let content = e.getContent();
  if (selected.length === 0) {
    // Give extra word
    chunk = e.__localize('enter text here');
  } else {
    chunk = selected.text;
  }

  e.replaceSelection(wrapper + '\n' + chunk + '\n' + wrapper);
  cursor = selected.start + 1 + wrapper.length;
  // Set the cursor
  return e.setSelection(cursor, cursor + chunk.length);
} ;

let insertImage = function(link, e) {
  // Give ![] surround the selection and prepend the image link
  let chunk = undefined;
  let cursor = undefined;
  let selected = e.getSelection();
  let content = e.getContent();
  if (selected.length === 0) {
    // Give extra word
    chunk = e.__localize('enter image description here');
  } else {
    chunk = selected.text;
  }

  let sanitizedLink = $(`<div>${link}</div>`).text();
  // transform selection and set the cursor into chunked text
  e.replaceSelection(`![${chunk}](${sanitizedLink} "${e.__localize('enter image title here')}")`);
  cursor = selected.start + 2;
  // Set the next tab
  e.setNextTab(e.__localize('enter image title here'));
  // Set the cursor
  return e.setSelection(cursor, cursor + chunk.length);
};

let insertIcon = function(icon, e) {
  // Give ![] surround the selection and prepend the image link
  let cursor = undefined;
  let selected = e.getSelection();
  let content = e.getContent();

  // transform selection and set the cursor into chunked text
  e.replaceSelection(`%(${icon}) `);
  cursor = selected.start + icon.length + 4;
  // Set the next tab
  e.setNextTab('');
  // Set the cursor
  return e.setSelection(cursor, cursor);
};

let iconChoice = function(editor, e) {
  let markup = "<%= font_awesome_selector %>";

  let $modal = $(markup);
  $(document.body).append($modal);

  $modal.find('.btn').on('click', () => $modal.remove());

  return $modal.find('.icon').on('click', function() {
    let $li = $(this);

    insertIcon($li.data('value'), e);
    return $modal.remove();
  });
};

let toggleHelp = function(editor, e) {
  let markup = "<%= help_selector %>";

  let $modal = $(markup);
  $(document.body).append($modal);

  return $modal.find('.btn').on('click', () => $modal.remove());
};

let insertButton = function(e) {
  // Give [] surround the selection and prepend the link
  let chunk = undefined;
  let cursor = undefined;
  let selected = e.getSelection();
  let content = e.getContent();
  let link = undefined;
  if (selected.length === 0) {
    // Give extra word
    chunk = e.__localize('enter link description here');
  } else {
    chunk = selected.text;
  }
  link = prompt(e.__localize('Insert Hyperlink'), 'http://');
  let urlRegex = new RegExp('^((http|https)://|(mailto:)|(//))[a-z0-9]', 'i');
  if ((link !== null) && (link !== '') && (link !== 'http://') && urlRegex.test(link)) {
    let sanitizedLink = $(`<div>${link}</div>`).text();
    // transform selection and set the cursor into chunked text
    e.replaceSelection(`(${chunk}=>${sanitizedLink})`);
    cursor = selected.start + 1;
    // Set the cursor
    e.setSelection(cursor, cursor + chunk.length);
  }
};

let uploadFile = function(editor, e) {
  let uploader  = $('.direct-upload').first().clone();
  uploader.insertAfter($('.direct-upload').first());
  let redirectURL = document.location.protocol + '//' + document.location.host + '/result.html';
  let progress = editor.find('.progress');

  let $fileField = uploader.find('input[type="file"]');
  $fileField.attr('id', `markdown-uploader-${id}`);

  let isIE = $('html').hasClass('ie9') || $('html').hasClass('lt-ie9');



  $(uploader).fileupload({
    url:          uploader.attr('action'),
    type:         'POST',
    autoUpload:   true,
    sequentialUploads: true,
    crossDomain: true,
    redirect: isIE ? redirectURL : undefined,
    redirectParamName: isIE ? 'success_action_redirect' : undefined,
    forceIframeTransport: isIE,

    // This is really important as s3 gives us back the url of the file in a XML document
    // dataType:     'xml',
    dataType:     'text',

    add(event, data) {
      let prevUpload;
      let signedData = {
        doc: {
          title: data.files[0].name
        }
      };

      if (isIE) { signedData['success_action_redirect'] = redirectURL; }

      $.ajax({
        url:      '/signed_urls',
        type:     'GET',
        dataType: 'json',
        async:    false,

        // send the file name to the server so it can generate the key param
        data: signedData,

        success(data) {
          // Now that we have our data, we update the form so it contains all
          // the needed data to sign the request
          uploader.find('input[name=key]').val(String(data.key));
          uploader.find('input[name=policy]').val(String(data.policy));
          return uploader.find('input[name=signature]').val(String(data.signature));
        }
      });

      if (prevUpload) { prevUpload.abort(); }
      return prevUpload = data.submit();
    },

    send(e, data) {
      return progress.fadeIn(100);
    },

    progress(e, data) {
      // This is what makes everything really cool, thanks to that callback
      // you can now update the progress bar based on the upload progress
      let percent = Math.round((e.loaded / e.total) * 100);
      return progress.find('.progress-bar').css('width', percent + '%');
    },

    fail(e, data) {
      return console.log(e, data);
    },

    success(data) {
      let url;
      if (data.indexOf('<?xml') === -1) {
        url = uploader.attr('action') + '/' + data.split('&')[1].split('=')[1];
        return insertImage(url, e);
      } else {
        // Here we get the file url on s3 in an xml doc
        url = $(data).find('Location').text();
        return insertImage(url, e);
      }
    },

    done(event, data) {
      return progress.fadeOut(300, () => progress.find('.progress-bar').css('width', 0));
    }
  });

  $fileField.trigger('click');

  return id++;
};

widgets.define('markdown', (option) => (el, widget) => {
  let $mdEditor = null;
  $(el).markdown({
    hiddenButtons: [<%= ignored.join(', ') %>],
    reorderButtonGroups: [
      'groupFont',
      'groupParagraph',
      'groupLink',
      'groupMisc',
      'groupHelp',
      'groupUtil'
    ],
    additionalButtons: [
      {
        name: "groupLink",
        data: [
          <% if use_aws %>
          {
            name: "cmdUploadImage",
            toggle: false,
            title: "Image",
            icon: "fa fa-picture-o",
            callback: (e) => {
              uploadFile($mdEditor, e);
            },
          },
          <% end %>
          {
            name: "cmdIcon",
            toggle: false,
            title: "Icône",
            icon: "fa fa-magic",
            callback(e) {
              return iconChoice($mdEditor, e);
            }
          },
          {
            name: "cmdButton",
            toggle: false,
            title: "Boutons",
            icon: "fa fa-hand-pointer-o",

            callback: insertButton
          }
        ]
      },
      {
        name: "groupParagraph",
        data: [
          {
            name: "cmdTextRight",
            toggle: false,
            title: "Aligner à droite",
            icon: "fa fa-align-right",
            callback: wrap('-->>')
          },
          {
            name: "cmdTextCenter",
            toggle: false,
            title: "Centré",
            icon: "fa fa-align-center",
            callback: wrap('-><-')
          },
          {
            name: "cmdTextLeft",
            toggle: false,
            title: "Aligner à gauche",
            icon: "fa fa-align-left",
            callback: wrap('<<--')
          }
        ]
      },
      {
        name: "groupFont",
        data: [
          {
            name: "cmdLettrine",
            toggle: false,
            title: "Lettrine",
            icon: "fa fa-text-height",
            callback(e) {
              let selected = e.getSelection();

              e.replaceSelection(`^^^${selected.text}^^^`);
              return e.setSelection(selected.start + 3,selected.start + 3 + selected.length);
            }
          }
        ]
      },
      {
        name: "groupMisc",
        data: [
          {
            name: "cmdWell",
            toggle: false,
            title: "Encart fond gris",
            icon: "fa fa-square",
            callback(e) {
              let selected = e.getSelection();

              e.replaceSelection(`%%\n${selected.text}\n%%`);
              return e.setSelection(selected.start + 3,selected.start + 3 + selected.length);
            }
          },
          {
            name: "cmdWellNarrow",
            toggle: false,
            title: "Encart centré",
            icon: "fa fa-square-o",
            callback(e) {
              let selected = e.getSelection();

              e.replaceSelection(`%%%\n${selected.text}\n%%%`);
              return e.setSelection(selected.start + 4,selected.start + 4 + selected.length);
            }
          }
        ]
      },
      {
        name: 'groupHelp',
        data: [
          {
            name: 'cmdHelp',
            toggle: false,
            title: "Afficher l'aide Markdown",
            icon: "fa fa-question-circle",
            callback(e) {
              return toggleHelp($mdEditor, e);
            }
          }
        ]
      }
    ],
    footer(e) {
      return `\
<div class="progress" style="display: none; height: 10px;">
  <div class="progress-bar progress-bar-success"></div>
</div>\
`;
    }
  });

  return $mdEditor = $(el).parent('.md-editor');
});
